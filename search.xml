<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shell-programming]]></title>
    <url>%2F2018%2F01%2F18%2Fshell-programming%2F</url>
    <content type="text"><![CDATA[Variable ScopeThe variable in the shell programming is not required to declare explicitly, whichmeans using any variable in any place is allowed. It is easy to access the value by $vairableThe variale scope is global by default. Only in the function, the local variable can be declared 12345678910#!/bin/shvariableA="Hello World"variableB="Fertiland"echo "$variableA, $variableB"function test()&#123; local variableA="Bye Bye" echo "$variableA, $variableB"&#125; Variable ReferenceMap and ArrayGet Keys12declare -A map=(["1"]="a" ["2"]="b" ["3"]="c")echo $&#123;!map[@]&#125; Get Values12declare -A map=(["1"]="a" ["2"]="b" ["3"]="c")echo $&#123;map[@]&#125; Exampleupdate or rollback wrapper scripts 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#!/bin/shfunction preUpdateNode_xxx_1_000_to_xxx_1_100()&#123; nodeType=$1 if [ "$nodeType" = "node" ] ; then echo "preUpdate node " else echo "wrong node type" fi&#125;function postUpdateNode_xxx_1_100_to_xxx_1_200()&#123; nodeType=$1 if [ "$nodeType" = "node" ] ; then echo "postUpdate node " else echo "wrong node type" fi&#125;function dummy()&#123; echo "dummy functions"&#125;function preUpdate()&#123; local nodeType=$1 while [[ ! "$nextVer" = "$endVer" ]] do case $nodeType in "node") for key in $&#123;!preUpdateNodeActions[@]&#125; do if [[ "$key" = $nextVer* ]] ; then nextVer=$(echo $key|cut -d"," -f2) echo $nextVer eval $&#123;preUpdateNodeActions[$key]&#125; $nodeType break fi done ;; esac sleep 1 done&#125;function postUpdate()&#123; local nodeType=$1 while [[ ! "$nextVer" = "$endVer" ]] do case $nodeType in "node") for key in $&#123;!postUpdateNodeActions[@]&#125; do if [[ "$key" = $nextVer* ]] ; then nextVer=$(echo $key|cut -d"," -f2) echo $nextVer eval $&#123;postUpdateNodeActions[$key]&#125; $nodeType break fi done ;; esac sleep 1 done&#125;function updatePackage()&#123; echo "update"&#125;function preCheck()&#123; echo "preCheck"&#125;# Main Flowdeclare -A preUpdateNodeActions=(["xxx.1.000,xxx.1.100"]=preUpdateNode_xxx_1_000_to_xxx_1_100 ["xxx.1.100,xxx.1.200"]=dummy ["xxx.1.200,xxx.1.300"]=dummy)declare -A postUpdateNodeActions=(["xxx.1.000,xxx.1.100"]=dummy ["xxx.1.100,xxx.1.200"]=postUpdateNode_xxx_1_100_to_xxx_1_200 ["xxx.1.200,xxx.1.300"]=dummy)startVer="xxx.1.000"nextVer=$startVerendVer="xxx.1.300"nodeType="node"preCheckpreUpdate $nodeTypeupdatePackagepostUpdate $nodeType]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F01%2F06%2Fprogrammer-draw-1%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[systemd service - How to monitor file change]]></title>
    <url>%2F2018%2F01%2F04%2Fsystemd-service%2F</url>
    <content type="text"><![CDATA[systemd.path â€” Path unit configurationsystemd.path Watch all the files under pathsrv.service12345678910111213[Unit]Description=srv 0.1 Service descriptionAfter=network.target[Service]Type=simpleWorkingDirectory=/opt/srvExecStart=/opt/srv/bin/srvUser=rootGroup=root[Install]WantedBy=multi-user.target srv-watcher.service12345678910[Unit]Description=srv restarterAfter=network.target[Service]Type=oneshotExecStart=/usr/bin/systemctl restart srv.service[Install]WantedBy=multi-user.target srv-watcher.pathPathModified can be file or path. If it is path, then all the files contained will be watched.12345[Path]PathModified=/opt/srv/lib[Install]WantedBy=multi-user.target]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
