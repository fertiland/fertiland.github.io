<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fertiland.github.io/"/>
  <updated>2018-01-22T04:14:37.939Z</updated>
  <id>http://fertiland.github.io/</id>
  
  <author>
    <name>Fertiland Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>getaddrinfo</title>
    <link href="http://fertiland.github.io/2018/01/22/getaddrinfo/"/>
    <id>http://fertiland.github.io/2018/01/22/getaddrinfo/</id>
    <published>2018-01-22T04:07:09.000Z</published>
    <updated>2018-01-22T04:14:37.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="getaddrinfo-example"><a href="#getaddrinfo-example" class="headerlink" title="getaddrinfo example"></a>getaddrinfo example</h2><pre><code>filename: mynslookup.cbuild:    gcc -o mynslookup mynslookup.crun:    ./mynslookup www.google.com    Address: 69.171.245.84</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hints</span>, *<span class="title">p</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">servinfo</span>;</span></span><br><span class="line">    <span class="keyword">char</span> ipstr[INET_ADDRSTRLEN];</span><br><span class="line">    <span class="comment">//char hostname[128];</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints);</span><br><span class="line"></span><br><span class="line">    hints.ai_family   = AF_UNSPEC;</span><br><span class="line">    hints.ai_socktype = SOCK_STREAM;</span><br><span class="line">    hints.ai_flags    = AI_PASSIVE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//gethostname(hostname, 128);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( argc &lt; <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s domain_name"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((status = getaddrinfo(argv[<span class="number">1</span>], <span class="literal">NULL</span>, &amp;hints, &amp;servinfo)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"getaddrinfo error: %s\n"</span>, gai_strerror(status));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p=servinfo; p!=<span class="literal">NULL</span>; p=p-&gt;ai_next) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>  *<span class="title">addr</span>;</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;ai_family == AF_INET) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">ipv</span> = (<span class="title">struct</span> <span class="title">sockaddr_in</span> *)<span class="title">p</span>-&gt;<span class="title">ai_addr</span>;</span></span><br><span class="line">            addr = &amp;(ipv-&gt;sin_addr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p-&gt;ai_addr;</span><br><span class="line">            addr = (struct in_addr *) &amp;(ipv6-&gt;sin6_addr);</span><br><span class="line">        &#125;</span><br><span class="line">        inet_ntop(p-&gt;ai_family, addr, ipstr, <span class="keyword">sizeof</span> ipstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Address: %s\n"</span>, ipstr);</span><br><span class="line">    freeaddrinfo(servinfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;getaddrinfo-example&quot;&gt;&lt;a href=&quot;#getaddrinfo-example&quot; class=&quot;headerlink&quot; title=&quot;getaddrinfo example&quot;&gt;&lt;/a&gt;getaddrinfo example&lt;/h2&gt;&lt;pre&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell-programming</title>
    <link href="http://fertiland.github.io/2018/01/18/shell-programming/"/>
    <id>http://fertiland.github.io/2018/01/18/shell-programming/</id>
    <published>2018-01-18T10:40:21.000Z</published>
    <updated>2018-02-10T08:14:30.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shell-Function"><a href="#Shell-Function" class="headerlink" title="Shell Function"></a>Shell Function</h2><p><a href="http://www.tldp.org/LDP/abs/html/index.html" target="_blank" rel="noopener">Advanced Bash-Scripting Guide</a></p><h3 id="Modulization"><a href="#Modulization" class="headerlink" title="Modulization"></a>Modulization</h3><p>Use function as the first language to describe the call flows. Main function show all the function flows.<br>common functions will be put into specific module, then use source command to include the function definition.<br>Below snippet is only included in the head of sourced script.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># avoid double inclusion</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="string">"<span class="variable">$&#123;BashInclude+defined&#125;</span>"</span> == <span class="string">"defined"</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">BashInclude=1</span><br></pre></td></tr></table></figure><h3 id="Function-Concept"><a href="#Function-Concept" class="headerlink" title="Function Concept"></a>Function Concept</h3><p>Function itself is a variable.<br>Define the function before call it.</p><h3 id="Function-Return-Value"><a href="#Function-Return-Value" class="headerlink" title="Function Return Value"></a>Function Return Value</h3><p>Function can only return numeric values. The important point is that a program should always return<br>zero if completes successfully, non-zero if something went wrong. </p><p>Return can only ‘return’ from a function or sourced script.</p><h2 id="Functions-that-execute-in-a-separate-process"><a href="#Functions-that-execute-in-a-separate-process" class="headerlink" title="Functions that execute in a separate process"></a>Functions that execute in a separate process</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hw()(<span class="built_in">echo</span> <span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><h2 id="Shell-Scripting-Disable-Control-C"><a href="#Shell-Scripting-Disable-Control-C" class="headerlink" title="Shell Scripting Disable Control+C"></a>Shell Scripting Disable Control+C</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kill -l to list all the signals</span></span><br><span class="line"><span class="comment"># Signal 2 is Ctrl+C</span></span><br><span class="line"><span class="comment"># Okay disable it:</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">''</span> 2  </span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">command3</span><br><span class="line"><span class="comment"># Enable Ctrl+C</span></span><br><span class="line"><span class="built_in">trap</span> 2</span><br></pre></td></tr></table></figure><h2 id="Variable-Scope"><a href="#Variable-Scope" class="headerlink" title="Variable Scope"></a>Variable Scope</h2><p>The variable in the shell programming is not required to declare explicitly, which<br>means using any variable in any place is allowed. It is easy to access the value by $vairable<br>The variable scope is global by default. Only in the function, the local variable can be declared.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">variableA=<span class="string">"Hello World"</span></span><br><span class="line">variableB=<span class="string">"Fertiland"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> variableA=<span class="string">"Bye Bye"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$variableA</span>, <span class="variable">$variableB</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$variableA</span>, <span class="variable">$variableB</span>"</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$variableA</span>, <span class="variable">$variableB</span>"</span></span><br></pre></td></tr></table></figure><h3 id="readonly-variable"><a href="#readonly-variable" class="headerlink" title="readonly variable"></a>readonly variable</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">readonly</span> hello=<span class="string">"hello"</span></span><br><span class="line">hello=<span class="string">"world"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$hello</span></span><br></pre></td></tr></table></figure><h2 id="Variable-Reference"><a href="#Variable-Reference" class="headerlink" title="Variable Reference"></a>Variable Reference</h2><h2 id="Map-and-Array"><a href="#Map-and-Array" class="headerlink" title="Map and Array"></a>Map and Array</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A VAR   <span class="comment"># Local</span></span><br><span class="line"><span class="built_in">declare</span> -gA VAR  <span class="comment"># Global</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use spaces between parentheses and contents; I've heard reports of subtle bugs</span></span><br><span class="line"><span class="comment"># on some versions when they are omitted having to do with spaces in keys.</span></span><br><span class="line"><span class="built_in">declare</span> -A VAR=( [<span class="string">''</span>]=<span class="string">'a'</span> [0]=<span class="string">'1'</span> [<span class="string">'duck'</span>]=<span class="string">'quack'</span> )</span><br><span class="line"></span><br><span class="line">VAR+=( [<span class="string">'alpha'</span>]=<span class="string">'beta'</span> [2]=3 )  <span class="comment"># Combine arrays</span></span><br><span class="line"></span><br><span class="line">VAR[<span class="string">'cow'</span>]=<span class="string">'moo'</span>  <span class="comment"># Set a single element</span></span><br><span class="line"><span class="built_in">unset</span> VAR[<span class="string">'cow'</span>]  <span class="comment"># Unset a single element</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> VAR     <span class="comment"># Unset an entire array</span></span><br><span class="line"><span class="built_in">unset</span> VAR[@]  <span class="comment"># Unset an entire array</span></span><br><span class="line"><span class="built_in">unset</span> VAR[*]  <span class="comment"># Unset each element with a key corresponding to a file in the</span></span><br><span class="line">              <span class="comment"># current directory; if * doesn't expand, unset the entire array</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> KEYS=( <span class="string">"<span class="variable">$&#123;!VAR[@]&#125;</span>"</span> )  <span class="comment"># Get all of the keys in VAR</span></span><br></pre></td></tr></table></figure><h3 id="Get-Keys"><a href="#Get-Keys" class="headerlink" title="Get Keys"></a>Get Keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A map=([<span class="string">"1"</span>]=<span class="string">"a"</span> [<span class="string">"2"</span>]=<span class="string">"b"</span> [<span class="string">"3"</span>]=<span class="string">"c"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!map[@]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Get-Values"><a href="#Get-Values" class="headerlink" title="Get Values"></a>Get Values</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A map=([<span class="string">"1"</span>]=<span class="string">"a"</span> [<span class="string">"2"</span>]=<span class="string">"b"</span> [<span class="string">"3"</span>]=<span class="string">"c"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;map[@]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>update or rollback wrapper scripts</p><img src="http://www.plantuml.com/plantuml/svg/uoekIImguR8gA4hLBIr8IIn9rQtEoqz93QaiIAsrvhA2Y04P1Vd59TXK59Va5t010000"><img src="http://www.plantuml.com/plantuml/svg/uoekIImguR8gA4hLBShFoKbAJCxMhSxBJqaDgIn8hRNcieA90fa5-SKbs5KLb-GNS040"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> preUpdateNode_xxx_1_000_to_xxx_1_100()</span><br><span class="line">&#123;</span><br><span class="line">   nodeType=<span class="variable">$1</span></span><br><span class="line">   <span class="keyword">if</span> [ <span class="string">"<span class="variable">$nodeType</span>"</span> = <span class="string">"node"</span> ] ; <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"preUpdate node "</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"wrong node type"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> postUpdateNode_xxx_1_100_to_xxx_1_200()</span><br><span class="line">&#123;</span><br><span class="line">   nodeType=<span class="variable">$1</span></span><br><span class="line">   <span class="keyword">if</span> [ <span class="string">"<span class="variable">$nodeType</span>"</span> = <span class="string">"node"</span> ] ; <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"postUpdate node "</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"wrong node type"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> dummy()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"dummy functions"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> preUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> nodeType=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">while</span> [[ ! <span class="string">"<span class="variable">$nextVer</span>"</span> = <span class="string">"<span class="variable">$endVer</span>"</span> ]]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">       <span class="keyword">case</span> <span class="variable">$nodeType</span> <span class="keyword">in</span></span><br><span class="line">       <span class="string">"node"</span>)</span><br><span class="line">           <span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$&#123;!preUpdateNodeActions[@]&#125;</span></span><br><span class="line">           <span class="keyword">do</span></span><br><span class="line">              <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$key</span>"</span> = <span class="variable">$nextVer</span>* ]] ; <span class="keyword">then</span></span><br><span class="line">                  nextVer=$(<span class="built_in">echo</span> <span class="variable">$key</span>|cut -d<span class="string">","</span> -f2)</span><br><span class="line">                  <span class="built_in">echo</span> <span class="variable">$nextVer</span></span><br><span class="line">                  <span class="built_in">eval</span> <span class="variable">$&#123;preUpdateNodeActions[$key]&#125;</span> <span class="variable">$nodeType</span></span><br><span class="line">                  <span class="built_in">break</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">           <span class="keyword">done</span></span><br><span class="line">           ;;</span><br><span class="line">       <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">       sleep 1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> postUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> nodeType=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> [[ ! <span class="string">"<span class="variable">$nextVer</span>"</span> = <span class="string">"<span class="variable">$endVer</span>"</span> ]]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">       <span class="keyword">case</span> <span class="variable">$nodeType</span> <span class="keyword">in</span></span><br><span class="line">       <span class="string">"node"</span>)</span><br><span class="line">           <span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$&#123;!postUpdateNodeActions[@]&#125;</span></span><br><span class="line">           <span class="keyword">do</span></span><br><span class="line">              <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$key</span>"</span> = <span class="variable">$nextVer</span>* ]] ; <span class="keyword">then</span></span><br><span class="line">                  nextVer=$(<span class="built_in">echo</span> <span class="variable">$key</span>|cut -d<span class="string">","</span> -f2)</span><br><span class="line">                  <span class="built_in">echo</span> <span class="variable">$nextVer</span></span><br><span class="line">                  <span class="built_in">eval</span> <span class="variable">$&#123;postUpdateNodeActions[$key]&#125;</span> <span class="variable">$nodeType</span></span><br><span class="line">                  <span class="built_in">break</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">           <span class="keyword">done</span></span><br><span class="line">           ;;</span><br><span class="line">       <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">       sleep 1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> updatePackage()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"update"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> preCheck()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"preCheck"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Main Flow</span></span><br><span class="line"><span class="built_in">declare</span> -A preUpdateNodeActions=([<span class="string">"xxx.1.000,xxx.1.100"</span>]=preUpdateNode_xxx_1_000_to_xxx_1_100</span><br><span class="line">                                [<span class="string">"xxx.1.100,xxx.1.200"</span>]=dummy</span><br><span class="line">                                [<span class="string">"xxx.1.200,xxx.1.300"</span>]=dummy)</span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -A postUpdateNodeActions=([<span class="string">"xxx.1.000,xxx.1.100"</span>]=dummy</span><br><span class="line">                                 [<span class="string">"xxx.1.100,xxx.1.200"</span>]=postUpdateNode_xxx_1_100_to_xxx_1_200</span><br><span class="line">                                 [<span class="string">"xxx.1.200,xxx.1.300"</span>]=dummy)</span><br><span class="line"></span><br><span class="line">startVer=<span class="string">"xxx.1.000"</span></span><br><span class="line">nextVer=<span class="variable">$startVer</span></span><br><span class="line">endVer=<span class="string">"xxx.1.300"</span></span><br><span class="line">nodeType=<span class="string">"node"</span></span><br><span class="line"></span><br><span class="line">preCheck</span><br><span class="line">preUpdate <span class="variable">$nodeType</span></span><br><span class="line">updatePackage</span><br><span class="line">postUpdate <span class="variable">$nodeType</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shell-Function&quot;&gt;&lt;a href=&quot;#Shell-Function&quot; class=&quot;headerlink&quot; title=&quot;Shell Function&quot;&gt;&lt;/a&gt;Shell Function&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.tl
      
    
    </summary>
    
      <category term="programming" scheme="http://fertiland.github.io/categories/programming/"/>
    
    
      <category term="shell" scheme="http://fertiland.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>systemd service - How to monitor file change</title>
    <link href="http://fertiland.github.io/2018/01/04/systemd-service/"/>
    <id>http://fertiland.github.io/2018/01/04/systemd-service/</id>
    <published>2018-01-04T10:26:56.763Z</published>
    <updated>2018-01-04T10:26:56.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="systemd-path-—-Path-unit-configuration"><a href="#systemd-path-—-Path-unit-configuration" class="headerlink" title="systemd.path — Path unit configuration"></a>systemd.path — Path unit configuration</h2><p><a href="https://freedesktop.org/software/systemd/man/systemd.path.html" target="_blank" rel="noopener">systemd.path</a></p><h2 id="Watch-all-the-files-under-path"><a href="#Watch-all-the-files-under-path" class="headerlink" title="Watch all the files under path"></a>Watch all the files under path</h2><h3 id="srv-service"><a href="#srv-service" class="headerlink" title="srv.service"></a>srv.service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=srv 0.1 Service description</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/opt/srv</span><br><span class="line">ExecStart=/opt/srv/bin/srv</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="srv-watcher-service"><a href="#srv-watcher-service" class="headerlink" title="srv-watcher.service"></a>srv-watcher.service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=srv restarter</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/bin/systemctl restart srv.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="srv-watcher-path"><a href="#srv-watcher-path" class="headerlink" title="srv-watcher.path"></a>srv-watcher.path</h3><p>PathModified can be file or path. If it is path, then all the files contained will be watched.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Path]</span><br><span class="line">PathModified=/opt/srv/lib</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;systemd-path-—-Path-unit-configuration&quot;&gt;&lt;a href=&quot;#systemd-path-—-Path-unit-configuration&quot; class=&quot;headerlink&quot; title=&quot;systemd.path — P
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://fertiland.github.io/2017/12/27/hello-world/"/>
    <id>http://fertiland.github.io/2017/12/27/hello-world/</id>
    <published>2017-12-27T09:19:28.960Z</published>
    <updated>2017-12-27T09:19:28.960Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
